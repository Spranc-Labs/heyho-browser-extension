#!/bin/bash
#
# Pre-commit hook for HeyHo Browser Extension
# Runs ESLint and Prettier on staged JavaScript files
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}═══════════════════════════════════════════════${NC}"
echo -e "${BLUE}  HeyHo Browser Extension - Pre-commit Check${NC}"
echo -e "${BLUE}═══════════════════════════════════════════════${NC}"

# Get the directory of this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Change to project root
cd "$PROJECT_ROOT"

# Get staged JavaScript files
STAGED_JS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.js$' || true)

if [ -z "$STAGED_JS_FILES" ]; then
  echo -e "${GREEN}✓${NC} No JavaScript files staged, skipping checks"
  echo ""
  exit 0
fi

echo -e "${BLUE}📝 Staged JavaScript files:${NC}"
echo "$STAGED_JS_FILES" | sed 's/^/  - /'
echo ""

# Check if node_modules exists
if [ ! -d "node_modules" ]; then
  echo -e "${YELLOW}⚠${NC}  node_modules not found. Run 'npm install' first."
  echo ""
  exit 1
fi

# Check if npx is available
if ! command -v npx &> /dev/null; then
  echo -e "${RED}✗${NC} npx not found. Please install Node.js and npm."
  echo ""
  exit 1
fi

# Step 1: Run ESLint
echo -e "${BLUE}🔍 Running ESLint...${NC}"
ESLINT_FAILED=0

for file in $STAGED_JS_FILES; do
  # Skip if file doesn't exist (was deleted)
  if [ ! -f "$file" ]; then
    continue
  fi

  npx eslint "$file" || ESLINT_FAILED=1
done

if [ $ESLINT_FAILED -eq 1 ]; then
  echo ""
  echo -e "${RED}✗ ESLint found issues!${NC}"
  echo -e "${YELLOW}  Fix them manually or run: ${NC}npm run lint:fix"
  echo ""
  exit 1
fi

echo -e "${GREEN}✓ ESLint passed${NC}"
echo ""

# Step 2: Run Prettier
echo -e "${BLUE}✨ Running Prettier...${NC}"

PRETTIER_CHANGED=0
for file in $STAGED_JS_FILES; do
  # Skip if file doesn't exist (was deleted)
  if [ ! -f "$file" ]; then
    continue
  fi

  # Check if file needs formatting
  if ! npx prettier --check "$file" &> /dev/null; then
    # Format the file
    npx prettier --write "$file"
    # Re-stage the file
    git add "$file"
    PRETTIER_CHANGED=1
    echo -e "  ${YELLOW}→${NC} Formatted: $file"
  fi
done

if [ $PRETTIER_CHANGED -eq 1 ]; then
  echo -e "${GREEN}✓ Prettier auto-formatted files (re-staged)${NC}"
else
  echo -e "${GREEN}✓ Prettier check passed${NC}"
fi

echo ""
echo -e "${GREEN}═══════════════════════════════════════════════${NC}"
echo -e "${GREEN}  ✓ All code quality checks passed!${NC}"
echo -e "${GREEN}═══════════════════════════════════════════════${NC}"
echo ""

exit 0
